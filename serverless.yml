# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nagato

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
# stage: dev
# region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

plugins:
  - serverless-python-requirements

package:
  include:
    - microblog/mastodon_api.py
    - microblog/mastodon_status.py
    - microblog/mastodon_user.py
    - microblog/microblog_api.py
    - microblog/microblog_status.py
    - microblog/microblog_user.py
    - microblog/twitter_api.py
    - microblog/twitter_status.py
    - microblog/twitter_user.py
    - handler.py
    - nagato.py
    - phrases.txt
    - yahoo.py
  exclude:
    - .*/**

functions:
  nagato_twitter:
    handler: handler.handle
    events:
      - schedule: rate(3 minutes)
    environment:
      SLACK_WEBHOOK_URL: ${ssm:SLACK_WEBHOOK_URL}
      TWITTER_CONSUMER_KEY: ${ssm:TWITTER_CONSUMER_KEY}
      TWITTER_CONSUMER_SECRET: ${ssm:TWITTER_CONSUMER_SECRET}
      TWITTER_ACCESS_TOKEN: ${ssm:TWITTER_ACCESS_TOKEN}
      TWITTER_ACCESS_SECRET: ${ssm:TWITTER_ACCESS_SECRET}
      YAHOO_APPLICATION_ID: ${ssm:YAHOO_APPLICATION_ID}
    reservedConcurrency: 1
  yukinagato_mastodon:
    handler: handler.handle
    events:
      - schedule: rate(1 minute)
    environment:
      SLACK_WEBHOOK_URL: ${ssm:SLACK_WEBHOOK_URL}
      MASTODON_ACCESS_TOKEN: ${ssm:MASTODON_ACCESS_TOKEN}
      MASTODON_API_BASE_URL: ${ssm:MASTODON_API_BASE_URL}
      YAHOO_APPLICATION_ID: ${ssm:YAHOO_APPLICATION_ID}
    reservedConcurrency: 1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
#
# vim:ts=2:sw=2:
